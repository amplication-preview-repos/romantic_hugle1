/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PreviousAttackHistory } from "./PreviousAttackHistory";
import { PreviousAttackHistoryCountArgs } from "./PreviousAttackHistoryCountArgs";
import { PreviousAttackHistoryFindManyArgs } from "./PreviousAttackHistoryFindManyArgs";
import { PreviousAttackHistoryFindUniqueArgs } from "./PreviousAttackHistoryFindUniqueArgs";
import { CreatePreviousAttackHistoryArgs } from "./CreatePreviousAttackHistoryArgs";
import { UpdatePreviousAttackHistoryArgs } from "./UpdatePreviousAttackHistoryArgs";
import { DeletePreviousAttackHistoryArgs } from "./DeletePreviousAttackHistoryArgs";
import { PreviousAttackHistoryService } from "../previousAttackHistory.service";
@graphql.Resolver(() => PreviousAttackHistory)
export class PreviousAttackHistoryResolverBase {
  constructor(protected readonly service: PreviousAttackHistoryService) {}

  async _previousAttackHistoriesMeta(
    @graphql.Args() args: PreviousAttackHistoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PreviousAttackHistory])
  async previousAttackHistories(
    @graphql.Args() args: PreviousAttackHistoryFindManyArgs
  ): Promise<PreviousAttackHistory[]> {
    return this.service.previousAttackHistories(args);
  }

  @graphql.Query(() => PreviousAttackHistory, { nullable: true })
  async previousAttackHistory(
    @graphql.Args() args: PreviousAttackHistoryFindUniqueArgs
  ): Promise<PreviousAttackHistory | null> {
    const result = await this.service.previousAttackHistory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PreviousAttackHistory)
  async createPreviousAttackHistory(
    @graphql.Args() args: CreatePreviousAttackHistoryArgs
  ): Promise<PreviousAttackHistory> {
    return await this.service.createPreviousAttackHistory({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PreviousAttackHistory)
  async updatePreviousAttackHistory(
    @graphql.Args() args: UpdatePreviousAttackHistoryArgs
  ): Promise<PreviousAttackHistory | null> {
    try {
      return await this.service.updatePreviousAttackHistory({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PreviousAttackHistory)
  async deletePreviousAttackHistory(
    @graphql.Args() args: DeletePreviousAttackHistoryArgs
  ): Promise<PreviousAttackHistory | null> {
    try {
      return await this.service.deletePreviousAttackHistory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
