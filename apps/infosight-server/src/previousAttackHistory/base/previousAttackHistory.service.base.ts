/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PreviousAttackHistory as PrismaPreviousAttackHistory,
} from "@prisma/client";

export class PreviousAttackHistoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PreviousAttackHistoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.previousAttackHistory.count(args);
  }

  async previousAttackHistories(
    args: Prisma.PreviousAttackHistoryFindManyArgs
  ): Promise<PrismaPreviousAttackHistory[]> {
    return this.prisma.previousAttackHistory.findMany(args);
  }
  async previousAttackHistory(
    args: Prisma.PreviousAttackHistoryFindUniqueArgs
  ): Promise<PrismaPreviousAttackHistory | null> {
    return this.prisma.previousAttackHistory.findUnique(args);
  }
  async createPreviousAttackHistory(
    args: Prisma.PreviousAttackHistoryCreateArgs
  ): Promise<PrismaPreviousAttackHistory> {
    return this.prisma.previousAttackHistory.create(args);
  }
  async updatePreviousAttackHistory(
    args: Prisma.PreviousAttackHistoryUpdateArgs
  ): Promise<PrismaPreviousAttackHistory> {
    return this.prisma.previousAttackHistory.update(args);
  }
  async deletePreviousAttackHistory(
    args: Prisma.PreviousAttackHistoryDeleteArgs
  ): Promise<PrismaPreviousAttackHistory> {
    return this.prisma.previousAttackHistory.delete(args);
  }
}
