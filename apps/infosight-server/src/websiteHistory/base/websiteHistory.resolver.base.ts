/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { WebsiteHistory } from "./WebsiteHistory";
import { WebsiteHistoryCountArgs } from "./WebsiteHistoryCountArgs";
import { WebsiteHistoryFindManyArgs } from "./WebsiteHistoryFindManyArgs";
import { WebsiteHistoryFindUniqueArgs } from "./WebsiteHistoryFindUniqueArgs";
import { CreateWebsiteHistoryArgs } from "./CreateWebsiteHistoryArgs";
import { UpdateWebsiteHistoryArgs } from "./UpdateWebsiteHistoryArgs";
import { DeleteWebsiteHistoryArgs } from "./DeleteWebsiteHistoryArgs";
import { WebsiteHistoryService } from "../websiteHistory.service";
@graphql.Resolver(() => WebsiteHistory)
export class WebsiteHistoryResolverBase {
  constructor(protected readonly service: WebsiteHistoryService) {}

  async _websiteHistoriesMeta(
    @graphql.Args() args: WebsiteHistoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [WebsiteHistory])
  async websiteHistories(
    @graphql.Args() args: WebsiteHistoryFindManyArgs
  ): Promise<WebsiteHistory[]> {
    return this.service.websiteHistories(args);
  }

  @graphql.Query(() => WebsiteHistory, { nullable: true })
  async websiteHistory(
    @graphql.Args() args: WebsiteHistoryFindUniqueArgs
  ): Promise<WebsiteHistory | null> {
    const result = await this.service.websiteHistory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => WebsiteHistory)
  async createWebsiteHistory(
    @graphql.Args() args: CreateWebsiteHistoryArgs
  ): Promise<WebsiteHistory> {
    return await this.service.createWebsiteHistory({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => WebsiteHistory)
  async updateWebsiteHistory(
    @graphql.Args() args: UpdateWebsiteHistoryArgs
  ): Promise<WebsiteHistory | null> {
    try {
      return await this.service.updateWebsiteHistory({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WebsiteHistory)
  async deleteWebsiteHistory(
    @graphql.Args() args: DeleteWebsiteHistoryArgs
  ): Promise<WebsiteHistory | null> {
    try {
      return await this.service.deleteWebsiteHistory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
