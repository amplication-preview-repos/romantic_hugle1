/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WebsiteHistoryService } from "../websiteHistory.service";
import { WebsiteHistoryCreateInput } from "./WebsiteHistoryCreateInput";
import { WebsiteHistory } from "./WebsiteHistory";
import { WebsiteHistoryFindManyArgs } from "./WebsiteHistoryFindManyArgs";
import { WebsiteHistoryWhereUniqueInput } from "./WebsiteHistoryWhereUniqueInput";
import { WebsiteHistoryUpdateInput } from "./WebsiteHistoryUpdateInput";

export class WebsiteHistoryControllerBase {
  constructor(protected readonly service: WebsiteHistoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WebsiteHistory })
  async createWebsiteHistory(
    @common.Body() data: WebsiteHistoryCreateInput
  ): Promise<WebsiteHistory> {
    return await this.service.createWebsiteHistory({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        changeDate: true,
        change: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WebsiteHistory] })
  @ApiNestedQuery(WebsiteHistoryFindManyArgs)
  async websiteHistories(
    @common.Req() request: Request
  ): Promise<WebsiteHistory[]> {
    const args = plainToClass(WebsiteHistoryFindManyArgs, request.query);
    return this.service.websiteHistories({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        changeDate: true,
        change: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WebsiteHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async websiteHistory(
    @common.Param() params: WebsiteHistoryWhereUniqueInput
  ): Promise<WebsiteHistory | null> {
    const result = await this.service.websiteHistory({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        changeDate: true,
        change: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WebsiteHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWebsiteHistory(
    @common.Param() params: WebsiteHistoryWhereUniqueInput,
    @common.Body() data: WebsiteHistoryUpdateInput
  ): Promise<WebsiteHistory | null> {
    try {
      return await this.service.updateWebsiteHistory({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          changeDate: true,
          change: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WebsiteHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWebsiteHistory(
    @common.Param() params: WebsiteHistoryWhereUniqueInput
  ): Promise<WebsiteHistory | null> {
    try {
      return await this.service.deleteWebsiteHistory({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          changeDate: true,
          change: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
