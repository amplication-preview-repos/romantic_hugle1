/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PredictedAttack } from "./PredictedAttack";
import { PredictedAttackCountArgs } from "./PredictedAttackCountArgs";
import { PredictedAttackFindManyArgs } from "./PredictedAttackFindManyArgs";
import { PredictedAttackFindUniqueArgs } from "./PredictedAttackFindUniqueArgs";
import { CreatePredictedAttackArgs } from "./CreatePredictedAttackArgs";
import { UpdatePredictedAttackArgs } from "./UpdatePredictedAttackArgs";
import { DeletePredictedAttackArgs } from "./DeletePredictedAttackArgs";
import { PredictedAttackService } from "../predictedAttack.service";
@graphql.Resolver(() => PredictedAttack)
export class PredictedAttackResolverBase {
  constructor(protected readonly service: PredictedAttackService) {}

  async _predictedAttacksMeta(
    @graphql.Args() args: PredictedAttackCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PredictedAttack])
  async predictedAttacks(
    @graphql.Args() args: PredictedAttackFindManyArgs
  ): Promise<PredictedAttack[]> {
    return this.service.predictedAttacks(args);
  }

  @graphql.Query(() => PredictedAttack, { nullable: true })
  async predictedAttack(
    @graphql.Args() args: PredictedAttackFindUniqueArgs
  ): Promise<PredictedAttack | null> {
    const result = await this.service.predictedAttack(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PredictedAttack)
  async createPredictedAttack(
    @graphql.Args() args: CreatePredictedAttackArgs
  ): Promise<PredictedAttack> {
    return await this.service.createPredictedAttack({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PredictedAttack)
  async updatePredictedAttack(
    @graphql.Args() args: UpdatePredictedAttackArgs
  ): Promise<PredictedAttack | null> {
    try {
      return await this.service.updatePredictedAttack({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PredictedAttack)
  async deletePredictedAttack(
    @graphql.Args() args: DeletePredictedAttackArgs
  ): Promise<PredictedAttack | null> {
    try {
      return await this.service.deletePredictedAttack(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
