/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PredictedAttackService } from "../predictedAttack.service";
import { PredictedAttackCreateInput } from "./PredictedAttackCreateInput";
import { PredictedAttack } from "./PredictedAttack";
import { PredictedAttackFindManyArgs } from "./PredictedAttackFindManyArgs";
import { PredictedAttackWhereUniqueInput } from "./PredictedAttackWhereUniqueInput";
import { PredictedAttackUpdateInput } from "./PredictedAttackUpdateInput";

export class PredictedAttackControllerBase {
  constructor(protected readonly service: PredictedAttackService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PredictedAttack })
  async createPredictedAttack(
    @common.Body() data: PredictedAttackCreateInput
  ): Promise<PredictedAttack> {
    return await this.service.createPredictedAttack({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        likelihood: true,
        attackType: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PredictedAttack] })
  @ApiNestedQuery(PredictedAttackFindManyArgs)
  async predictedAttacks(
    @common.Req() request: Request
  ): Promise<PredictedAttack[]> {
    const args = plainToClass(PredictedAttackFindManyArgs, request.query);
    return this.service.predictedAttacks({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        likelihood: true,
        attackType: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PredictedAttack })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async predictedAttack(
    @common.Param() params: PredictedAttackWhereUniqueInput
  ): Promise<PredictedAttack | null> {
    const result = await this.service.predictedAttack({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        likelihood: true,
        attackType: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PredictedAttack })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePredictedAttack(
    @common.Param() params: PredictedAttackWhereUniqueInput,
    @common.Body() data: PredictedAttackUpdateInput
  ): Promise<PredictedAttack | null> {
    try {
      return await this.service.updatePredictedAttack({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          likelihood: true,
          attackType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PredictedAttack })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePredictedAttack(
    @common.Param() params: PredictedAttackWhereUniqueInput
  ): Promise<PredictedAttack | null> {
    try {
      return await this.service.deletePredictedAttack({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          likelihood: true,
          attackType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
