/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FirewallInfo } from "./FirewallInfo";
import { FirewallInfoCountArgs } from "./FirewallInfoCountArgs";
import { FirewallInfoFindManyArgs } from "./FirewallInfoFindManyArgs";
import { FirewallInfoFindUniqueArgs } from "./FirewallInfoFindUniqueArgs";
import { CreateFirewallInfoArgs } from "./CreateFirewallInfoArgs";
import { UpdateFirewallInfoArgs } from "./UpdateFirewallInfoArgs";
import { DeleteFirewallInfoArgs } from "./DeleteFirewallInfoArgs";
import { FirewallInfoService } from "../firewallInfo.service";
@graphql.Resolver(() => FirewallInfo)
export class FirewallInfoResolverBase {
  constructor(protected readonly service: FirewallInfoService) {}

  async _firewallInfosMeta(
    @graphql.Args() args: FirewallInfoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FirewallInfo])
  async firewallInfos(
    @graphql.Args() args: FirewallInfoFindManyArgs
  ): Promise<FirewallInfo[]> {
    return this.service.firewallInfos(args);
  }

  @graphql.Query(() => FirewallInfo, { nullable: true })
  async firewallInfo(
    @graphql.Args() args: FirewallInfoFindUniqueArgs
  ): Promise<FirewallInfo | null> {
    const result = await this.service.firewallInfo(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FirewallInfo)
  async createFirewallInfo(
    @graphql.Args() args: CreateFirewallInfoArgs
  ): Promise<FirewallInfo> {
    return await this.service.createFirewallInfo({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FirewallInfo)
  async updateFirewallInfo(
    @graphql.Args() args: UpdateFirewallInfoArgs
  ): Promise<FirewallInfo | null> {
    try {
      return await this.service.updateFirewallInfo({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FirewallInfo)
  async deleteFirewallInfo(
    @graphql.Args() args: DeleteFirewallInfoArgs
  ): Promise<FirewallInfo | null> {
    try {
      return await this.service.deleteFirewallInfo(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
