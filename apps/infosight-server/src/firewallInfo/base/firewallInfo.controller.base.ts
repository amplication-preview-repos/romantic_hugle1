/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FirewallInfoService } from "../firewallInfo.service";
import { FirewallInfoCreateInput } from "./FirewallInfoCreateInput";
import { FirewallInfo } from "./FirewallInfo";
import { FirewallInfoFindManyArgs } from "./FirewallInfoFindManyArgs";
import { FirewallInfoWhereUniqueInput } from "./FirewallInfoWhereUniqueInput";
import { FirewallInfoUpdateInput } from "./FirewallInfoUpdateInput";

export class FirewallInfoControllerBase {
  constructor(protected readonly service: FirewallInfoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FirewallInfo })
  async createFirewallInfo(
    @common.Body() data: FirewallInfoCreateInput
  ): Promise<FirewallInfo> {
    return await this.service.createFirewallInfo({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firewallName: true,
        details: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FirewallInfo] })
  @ApiNestedQuery(FirewallInfoFindManyArgs)
  async firewallInfos(@common.Req() request: Request): Promise<FirewallInfo[]> {
    const args = plainToClass(FirewallInfoFindManyArgs, request.query);
    return this.service.firewallInfos({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firewallName: true,
        details: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FirewallInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async firewallInfo(
    @common.Param() params: FirewallInfoWhereUniqueInput
  ): Promise<FirewallInfo | null> {
    const result = await this.service.firewallInfo({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firewallName: true,
        details: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FirewallInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFirewallInfo(
    @common.Param() params: FirewallInfoWhereUniqueInput,
    @common.Body() data: FirewallInfoUpdateInput
  ): Promise<FirewallInfo | null> {
    try {
      return await this.service.updateFirewallInfo({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          firewallName: true,
          details: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FirewallInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFirewallInfo(
    @common.Param() params: FirewallInfoWhereUniqueInput
  ): Promise<FirewallInfo | null> {
    try {
      return await this.service.deleteFirewallInfo({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          firewallName: true,
          details: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
