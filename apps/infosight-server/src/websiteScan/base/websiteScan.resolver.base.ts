/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { WebsiteScan } from "./WebsiteScan";
import { WebsiteScanCountArgs } from "./WebsiteScanCountArgs";
import { WebsiteScanFindManyArgs } from "./WebsiteScanFindManyArgs";
import { WebsiteScanFindUniqueArgs } from "./WebsiteScanFindUniqueArgs";
import { CreateWebsiteScanArgs } from "./CreateWebsiteScanArgs";
import { UpdateWebsiteScanArgs } from "./UpdateWebsiteScanArgs";
import { DeleteWebsiteScanArgs } from "./DeleteWebsiteScanArgs";
import { WebsiteScanService } from "../websiteScan.service";
@graphql.Resolver(() => WebsiteScan)
export class WebsiteScanResolverBase {
  constructor(protected readonly service: WebsiteScanService) {}

  async _websiteScansMeta(
    @graphql.Args() args: WebsiteScanCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [WebsiteScan])
  async websiteScans(
    @graphql.Args() args: WebsiteScanFindManyArgs
  ): Promise<WebsiteScan[]> {
    return this.service.websiteScans(args);
  }

  @graphql.Query(() => WebsiteScan, { nullable: true })
  async websiteScan(
    @graphql.Args() args: WebsiteScanFindUniqueArgs
  ): Promise<WebsiteScan | null> {
    const result = await this.service.websiteScan(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => WebsiteScan)
  async createWebsiteScan(
    @graphql.Args() args: CreateWebsiteScanArgs
  ): Promise<WebsiteScan> {
    return await this.service.createWebsiteScan({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => WebsiteScan)
  async updateWebsiteScan(
    @graphql.Args() args: UpdateWebsiteScanArgs
  ): Promise<WebsiteScan | null> {
    try {
      return await this.service.updateWebsiteScan({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WebsiteScan)
  async deleteWebsiteScan(
    @graphql.Args() args: DeleteWebsiteScanArgs
  ): Promise<WebsiteScan | null> {
    try {
      return await this.service.deleteWebsiteScan(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
