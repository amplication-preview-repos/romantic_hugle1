/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WebsiteScanService } from "../websiteScan.service";
import { WebsiteScanCreateInput } from "./WebsiteScanCreateInput";
import { WebsiteScan } from "./WebsiteScan";
import { WebsiteScanFindManyArgs } from "./WebsiteScanFindManyArgs";
import { WebsiteScanWhereUniqueInput } from "./WebsiteScanWhereUniqueInput";
import { WebsiteScanUpdateInput } from "./WebsiteScanUpdateInput";

export class WebsiteScanControllerBase {
  constructor(protected readonly service: WebsiteScanService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WebsiteScan })
  async createWebsiteScan(
    @common.Body() data: WebsiteScanCreateInput
  ): Promise<WebsiteScan> {
    return await this.service.createWebsiteScan({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        url: true,
        scanDate: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WebsiteScan] })
  @ApiNestedQuery(WebsiteScanFindManyArgs)
  async websiteScans(@common.Req() request: Request): Promise<WebsiteScan[]> {
    const args = plainToClass(WebsiteScanFindManyArgs, request.query);
    return this.service.websiteScans({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        url: true,
        scanDate: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WebsiteScan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async websiteScan(
    @common.Param() params: WebsiteScanWhereUniqueInput
  ): Promise<WebsiteScan | null> {
    const result = await this.service.websiteScan({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        url: true,
        scanDate: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WebsiteScan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWebsiteScan(
    @common.Param() params: WebsiteScanWhereUniqueInput,
    @common.Body() data: WebsiteScanUpdateInput
  ): Promise<WebsiteScan | null> {
    try {
      return await this.service.updateWebsiteScan({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          url: true,
          scanDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WebsiteScan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWebsiteScan(
    @common.Param() params: WebsiteScanWhereUniqueInput
  ): Promise<WebsiteScan | null> {
    try {
      return await this.service.deleteWebsiteScan({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          url: true,
          scanDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
