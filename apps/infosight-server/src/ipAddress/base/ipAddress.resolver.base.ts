/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { IpAddress } from "./IpAddress";
import { IpAddressCountArgs } from "./IpAddressCountArgs";
import { IpAddressFindManyArgs } from "./IpAddressFindManyArgs";
import { IpAddressFindUniqueArgs } from "./IpAddressFindUniqueArgs";
import { CreateIpAddressArgs } from "./CreateIpAddressArgs";
import { UpdateIpAddressArgs } from "./UpdateIpAddressArgs";
import { DeleteIpAddressArgs } from "./DeleteIpAddressArgs";
import { IpAddressService } from "../ipAddress.service";
@graphql.Resolver(() => IpAddress)
export class IpAddressResolverBase {
  constructor(protected readonly service: IpAddressService) {}

  async _ipAddressesMeta(
    @graphql.Args() args: IpAddressCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [IpAddress])
  async ipAddresses(
    @graphql.Args() args: IpAddressFindManyArgs
  ): Promise<IpAddress[]> {
    return this.service.ipAddresses(args);
  }

  @graphql.Query(() => IpAddress, { nullable: true })
  async ipAddress(
    @graphql.Args() args: IpAddressFindUniqueArgs
  ): Promise<IpAddress | null> {
    const result = await this.service.ipAddress(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => IpAddress)
  async createIpAddress(
    @graphql.Args() args: CreateIpAddressArgs
  ): Promise<IpAddress> {
    return await this.service.createIpAddress({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => IpAddress)
  async updateIpAddress(
    @graphql.Args() args: UpdateIpAddressArgs
  ): Promise<IpAddress | null> {
    try {
      return await this.service.updateIpAddress({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => IpAddress)
  async deleteIpAddress(
    @graphql.Args() args: DeleteIpAddressArgs
  ): Promise<IpAddress | null> {
    try {
      return await this.service.deleteIpAddress(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
