/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { IpAddressService } from "../ipAddress.service";
import { IpAddressCreateInput } from "./IpAddressCreateInput";
import { IpAddress } from "./IpAddress";
import { IpAddressFindManyArgs } from "./IpAddressFindManyArgs";
import { IpAddressWhereUniqueInput } from "./IpAddressWhereUniqueInput";
import { IpAddressUpdateInput } from "./IpAddressUpdateInput";

export class IpAddressControllerBase {
  constructor(protected readonly service: IpAddressService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: IpAddress })
  async createIpAddress(
    @common.Body() data: IpAddressCreateInput
  ): Promise<IpAddress> {
    return await this.service.createIpAddress({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        typeField: true,
        address: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [IpAddress] })
  @ApiNestedQuery(IpAddressFindManyArgs)
  async ipAddresses(@common.Req() request: Request): Promise<IpAddress[]> {
    const args = plainToClass(IpAddressFindManyArgs, request.query);
    return this.service.ipAddresses({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        typeField: true,
        address: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: IpAddress })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async ipAddress(
    @common.Param() params: IpAddressWhereUniqueInput
  ): Promise<IpAddress | null> {
    const result = await this.service.ipAddress({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        typeField: true,
        address: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: IpAddress })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateIpAddress(
    @common.Param() params: IpAddressWhereUniqueInput,
    @common.Body() data: IpAddressUpdateInput
  ): Promise<IpAddress | null> {
    try {
      return await this.service.updateIpAddress({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          typeField: true,
          address: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: IpAddress })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteIpAddress(
    @common.Param() params: IpAddressWhereUniqueInput
  ): Promise<IpAddress | null> {
    try {
      return await this.service.deleteIpAddress({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          typeField: true,
          address: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
