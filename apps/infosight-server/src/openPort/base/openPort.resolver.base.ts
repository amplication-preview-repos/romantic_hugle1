/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { OpenPort } from "./OpenPort";
import { OpenPortCountArgs } from "./OpenPortCountArgs";
import { OpenPortFindManyArgs } from "./OpenPortFindManyArgs";
import { OpenPortFindUniqueArgs } from "./OpenPortFindUniqueArgs";
import { CreateOpenPortArgs } from "./CreateOpenPortArgs";
import { UpdateOpenPortArgs } from "./UpdateOpenPortArgs";
import { DeleteOpenPortArgs } from "./DeleteOpenPortArgs";
import { OpenPortService } from "../openPort.service";
@graphql.Resolver(() => OpenPort)
export class OpenPortResolverBase {
  constructor(protected readonly service: OpenPortService) {}

  async _openPortsMeta(
    @graphql.Args() args: OpenPortCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OpenPort])
  async openPorts(
    @graphql.Args() args: OpenPortFindManyArgs
  ): Promise<OpenPort[]> {
    return this.service.openPorts(args);
  }

  @graphql.Query(() => OpenPort, { nullable: true })
  async openPort(
    @graphql.Args() args: OpenPortFindUniqueArgs
  ): Promise<OpenPort | null> {
    const result = await this.service.openPort(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OpenPort)
  async createOpenPort(
    @graphql.Args() args: CreateOpenPortArgs
  ): Promise<OpenPort> {
    return await this.service.createOpenPort({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => OpenPort)
  async updateOpenPort(
    @graphql.Args() args: UpdateOpenPortArgs
  ): Promise<OpenPort | null> {
    try {
      return await this.service.updateOpenPort({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OpenPort)
  async deleteOpenPort(
    @graphql.Args() args: DeleteOpenPortArgs
  ): Promise<OpenPort | null> {
    try {
      return await this.service.deleteOpenPort(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
