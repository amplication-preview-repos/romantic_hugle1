/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OpenPortService } from "../openPort.service";
import { OpenPortCreateInput } from "./OpenPortCreateInput";
import { OpenPort } from "./OpenPort";
import { OpenPortFindManyArgs } from "./OpenPortFindManyArgs";
import { OpenPortWhereUniqueInput } from "./OpenPortWhereUniqueInput";
import { OpenPortUpdateInput } from "./OpenPortUpdateInput";

export class OpenPortControllerBase {
  constructor(protected readonly service: OpenPortService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OpenPort })
  async createOpenPort(
    @common.Body() data: OpenPortCreateInput
  ): Promise<OpenPort> {
    return await this.service.createOpenPort({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        portNumber: true,
        protocol: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [OpenPort] })
  @ApiNestedQuery(OpenPortFindManyArgs)
  async openPorts(@common.Req() request: Request): Promise<OpenPort[]> {
    const args = plainToClass(OpenPortFindManyArgs, request.query);
    return this.service.openPorts({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        portNumber: true,
        protocol: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OpenPort })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async openPort(
    @common.Param() params: OpenPortWhereUniqueInput
  ): Promise<OpenPort | null> {
    const result = await this.service.openPort({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        portNumber: true,
        protocol: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OpenPort })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOpenPort(
    @common.Param() params: OpenPortWhereUniqueInput,
    @common.Body() data: OpenPortUpdateInput
  ): Promise<OpenPort | null> {
    try {
      return await this.service.updateOpenPort({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          portNumber: true,
          protocol: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OpenPort })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOpenPort(
    @common.Param() params: OpenPortWhereUniqueInput
  ): Promise<OpenPort | null> {
    try {
      return await this.service.deleteOpenPort({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          portNumber: true,
          protocol: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
