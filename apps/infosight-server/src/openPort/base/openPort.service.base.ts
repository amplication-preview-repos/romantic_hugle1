/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, OpenPort as PrismaOpenPort } from "@prisma/client";

export class OpenPortServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.OpenPortCountArgs, "select">): Promise<number> {
    return this.prisma.openPort.count(args);
  }

  async openPorts(
    args: Prisma.OpenPortFindManyArgs
  ): Promise<PrismaOpenPort[]> {
    return this.prisma.openPort.findMany(args);
  }
  async openPort(
    args: Prisma.OpenPortFindUniqueArgs
  ): Promise<PrismaOpenPort | null> {
    return this.prisma.openPort.findUnique(args);
  }
  async createOpenPort(
    args: Prisma.OpenPortCreateArgs
  ): Promise<PrismaOpenPort> {
    return this.prisma.openPort.create(args);
  }
  async updateOpenPort(
    args: Prisma.OpenPortUpdateArgs
  ): Promise<PrismaOpenPort> {
    return this.prisma.openPort.update(args);
  }
  async deleteOpenPort(
    args: Prisma.OpenPortDeleteArgs
  ): Promise<PrismaOpenPort> {
    return this.prisma.openPort.delete(args);
  }
}
